package com.example.yja38.book;

import android.content.Intent;
import android.os.AsyncTask;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.design.widget.BottomNavigationView;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.MenuItem;
import android.view.View;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.toolbox.Volley;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class SelectWritingActivity extends AppCompatActivity implements AbsListView.OnScrollListener {

    private ListView listView;
    private BoardInfoAdapter adapter;
    private List<BoardInfo> boardInfoList;
    private Button getSi, getSu, getSo, getAll;
    private int count =0;
    String target;

    private int page = 0;           // 페이징 변수
    private final int OFFSET = 10; // 페이지마다 로드할 데이터 갯수

    private boolean lastItemVisibleFlag = false; // 리스트 스크롤이 마지막 셀에 있는지 체크
    private ProgressBar progressBar; // 프로그레스바
    private boolean mLockListView = false; // 데이터 불러올 때 중복 안되게 하는 변수



    private BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener
            = new BottomNavigationView.OnNavigationItemSelectedListener() {

        @Override
        public boolean onNavigationItemSelected(@NonNull MenuItem item) {
            switch (item.getItemId()) {
                case R.id.navigation_home:
                    Intent intent = new Intent(getApplicationContext(), MainActivity.class);
                    startActivity(intent);
                    return true;
                case R.id.navigation_writing:
                    new nBackgroundTask().execute();
                    return true;
                case R.id.navigation_reading:
                    Intent intent3 = new Intent(getApplicationContext(), SelectReadingActivity.class);
                    startActivity(intent3);
                    return true;
            }
            return false;
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_select_writing);

        BottomNavigationView navigation = (BottomNavigationView) findViewById(R.id.navigation);
        navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);

        progressBar = (ProgressBar) findViewById(R.id.progressbar);
        progressBar.setVisibility(View.GONE);

        getSi = (Button)findViewById(R.id.w_siBtn);
        getSu = (Button)findViewById(R.id.w_suBtn);
        getSo = (Button)findViewById(R.id.w_soBtn);
        getAll = (Button)findViewById(R.id.w_allBtn);


        listView=(ListView) findViewById(R.id.w_BoardListView);//id가 listView인 곳과 연동할 변수 생성(위에서 이미 초기화)
        boardInfoList=new ArrayList<BoardInfo>();//StoryInfo를 넣을 arraylist 생성함 (위에서 이미 초기화된 storyInfoList로 정함)
        adapter=new BoardInfoAdapter(getApplicationContext(),boardInfoList);//지금 storyinfolist에 가지고 있는 값들을 adapter에 넣음
        listView.setAdapter(adapter);//리스트뷰에 adapter값을 넣는다.

        listView.setOnScrollListener(this);
        getItem();

        /////////////////////////////////////아이템 클릭///////////////////////////////////
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override

            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

                BoardInfo boardInfo = (BoardInfo)adapter.getItem(position);
                String member_nickname=LoginActivity.Login_nickname;
                String board_no=boardInfo.Board_no;
                //boardInfo.Board_no  ,

                final Intent intent = new Intent(getApplicationContext(), WritingDetailActivity.class);

                intent.putExtra("boardInfo",boardInfo);

                //startActivity(intent);
                ////////////////////
                Response.Listener<String> responseListener = new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        try{
                            JSONObject jsonResponse=new JSONObject(response);
                            boolean exist = jsonResponse.getBoolean("exist");
                            if(exist)
                            {
                                int Exist=1;
                                intent.putExtra("Exist",Exist);
                                startActivity(intent);
                            }
                            else
                            {
                                int Exist=0;
                                intent.putExtra("Exist",Exist);
                                startActivity(intent);
                            }
                        }
                        catch (Exception e)
                        {
                            e.printStackTrace();
                        }
                    }
                };

                HeartRequest heartRequest= new HeartRequest(member_nickname,board_no,responseListener);//맴버값을 넣은후 response답을 받아결과를 도출한다.
                RequestQueue queue= Volley.newRequestQueue(SelectWritingActivity.this);
                queue.add(heartRequest);

                // startActivity(intent);

            }

        });


        ///////////////////////////////////////////////////////////카테고리별 버튼 리스너//////////////////////////////////////////////////////////////////////////////
        getAll.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {//클릭하면 동작시킴.
                //count =0;
                target = "http://yja3806.dothome.co.kr/GetBoard_all.php";
                new BackgroundTask().execute();
                getItem();

            }
        });

        getSi.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {//클릭하면 동작시킴.
                //count =0;
                target = "http://yja3806.dothome.co.kr/GetBoard_si.php";
                new BackgroundTask().execute();
                getItem();
            }
        });

        getSo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {//클릭하면 동작시킴.
                //count =0;

                target = "http://yja3806.dothome.co.kr/GetBoard_so.php";
                new BackgroundTask().execute();
                getItem();
            }
        });

        getSu.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {//클릭하면 동작시킴.
                //count =0;

                target = "http://yja3806.dothome.co.kr/GetBoard_su.php";
                new BackgroundTask().execute();
                getItem();
            }
        });


        Button writeBotton = (Button)findViewById(R.id.writeBtn);
        writeBotton.bringToFront();
        writeBotton.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {
                Intent intent = new Intent(getApplicationContext(), write.class);
                startActivity(intent); // 다음 화면으로 넘어간다
            }
        });

    }
    ////////////////////////////////////////////////////카테고리별 버튼 리스너 끝////////////////////////////////////////////////

    ////////////////////////////////////////////////스크롤이 바닥에 있을 때를 판단하여 리스트에 데이터 뿌려주는 함수////////////////////////
    @Override
    public void onScrollStateChanged(AbsListView view, int scrollState) {
        if(scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE && lastItemVisibleFlag && mLockListView == false) {
            progressBar.setVisibility(View.VISIBLE);
            getItem();

        }
    }
    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
        lastItemVisibleFlag = (totalItemCount >0) && (firstVisibleItem + visibleItemCount >=totalItemCount);
    }

    ///////////////////////////////////////////////////////스크롤 끝//////////////////////////////////////////////////////////////
    class nBackgroundTask extends AsyncTask<Void, Void, String> {
        String target;

        @Override
        protected void onPreExecute() {
            target = "http://yja3806.dothome.co.kr/GetBoard_all.php";

        }//php에 접속할 변수

        @Override
        protected String doInBackground(Void... voids) {
            try {
                URL url = new URL(target);
                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
                InputStream inputStream = httpURLConnection.getInputStream();
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));//접속구문
                String temp;
                StringBuilder stringBuilder = new StringBuilder();

                while ((temp = bufferedReader.readLine()) != null)//temp에 읽은 데이터를 넣는다. null이 아닐때까지.
                {
                    stringBuilder.append(temp + "\n");//temp를 string빌더에 넣는다.

                }
                bufferedReader.close();
                inputStream.close();
                httpURLConnection.disconnect();
                return stringBuilder.toString().trim();//받은 stringbuilder값 리턴


            } catch (Exception e)//예외처리
            {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        public void onProgressUpdate(Void... values) {
            super.onProgressUpdate(values);
        }

        @Override
        public void onPostExecute(String result) {
            Intent intent = new Intent(getApplicationContext(), SelectWritingActivity.class);//화면전환
            intent.putExtra("boardInfoList", result);//결과 값을 다음화면인 readingactivity에서 storyInfoList를 찾아 맵핑시켜 넣는다.
            getApplicationContext().startActivity(intent);//현재 화면 실행

        }
    }










    class BackgroundTask extends AsyncTask<Void, Void, String> {
        @Override
        protected void onPreExecute() {

        }//php에 접속할 변수

        @Override
        protected String doInBackground(Void... voids) {
            try {
                URL url = new URL(target);
                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
                InputStream inputStream = httpURLConnection.getInputStream();
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));//접속구문
                String temp;
                StringBuilder stringBuilder = new StringBuilder();

                while ((temp = bufferedReader.readLine()) != null)//temp에 읽은 데이터를 넣는다. null이 아닐때까지.
                {
                    stringBuilder.append(temp + "\n");//temp를 string빌더에 넣는다.

                }
                bufferedReader.close();
                inputStream.close();
                httpURLConnection.disconnect();
                return stringBuilder.toString().trim();//받은 stringbuilder값 리턴


            } catch (Exception e)//예외처리
            {
                e.printStackTrace();
            }
            return null;
        }
        @Override
        public void onProgressUpdate(Void... values) {
            super.onProgressUpdate(values);
        }

        @Override
        public void onPostExecute(String result) {
            Intent intent = new Intent(SelectWritingActivity.this, SelectWritingActivity.class);//화면전환
            intent.putExtra("boardInfoList", result);//결과 값을 다음화면인 readingactivity에서 storyInfoList를 찾아 맵핑시켜 넣는다.
            SelectWritingActivity.this.startActivity(intent);//현재 화면 실행
        }
    }

    public void getItem() {

        try{
            mLockListView = true;

            JSONObject jsonObject =new JSONObject(getIntent().getStringExtra("boardInfoList"));//이전 화면에서 넘겨받을 값을 저장.
            JSONArray jsonArray=jsonObject.getJSONArray("response");//리스폰으로 받았엇음.
            String Board_no, Board_category_no, Board_name, Board_content, Board_writer_nickname,Board_date, Board_recommend_count;

            //int page = getPage(count) *10; //10개 단위로 불러옴

            for(int i=0; i <10; i++)  {   //불러온 각각의 raw값들에 대해 안드로이드에서 지정한 변수로 초기화시킨다.
/*
                if(count > jsonArray.length()) {
                    Toast.makeText(this, "다 읽으셨습니다.", Toast.LENGTH_SHORT).show();
                    break;
                }
*/
                JSONObject object=jsonArray.getJSONObject( (page * OFFSET) +i);
                Board_no=object.getString("Board_no");
                Board_category_no=object.getString("Board_category_no");
                Board_name=object.getString("Board_name");
                Board_content=object.getString("Board_content");
                Board_writer_nickname=object.getString("Board_writer_nickname");
                Board_date=object.getString("Board_date");
                Board_recommend_count=object.getString("Board_recommend_count");

                BoardInfo boardInfo=new BoardInfo(Board_no,Board_category_no,Board_name,Board_content,Board_writer_nickname,Board_date,Board_recommend_count);//boardInfo에 넣는다.
                boardInfoList.add(boardInfo);//storyInfoList에 넣는다.
                //count++;
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        count = this.count;

        new Handler().postDelayed(new Runnable() {              //로딩중 나타내는 progressbar를 지워주는 함수
            @Override
            public void run() {
                page++;
                adapter.notifyDataSetChanged();
                progressBar.setVisibility(View.GONE);
                mLockListView = false;
            }
        },1000);                                    ///1000ms후에 progressbar 지워줌
    }
/*
    public int getPage(int count) {

        int page = (count +10) / 10;


        return page;
    }
*/
}
